'use strict';

var vscode = require('vscode');

function codeBlock(){
    this.parentCodeBlock = null; // Will be an object but setting it to null for now
    this.childCodeBlockElements = new Array(); // Array of codeBlockElements objects
    this.level = 1;// block level
}

function codeBlockElements() {
    this.key = ''; // String value
    //keyname string
    this.value = ''; //Sting of the value
    this.codeBlockValue = null; // Will be object but set to null for now
    this.isRoot = false;// Is root element
    this.keyLength = 0;// Legnth of keyname
    this.blockType = null; // Type of block (array or object)
    this.parentCodeBlock = null; // Not referenced in build loop
    this.keynameType = null; // Set keynameType as null default
    this.level = 1;// block level
}

function str(jsonText) {
    // Strip my text
    var stripedText = jsonText.replace(/(\r\n|\n|\r)/gm, '').trim();
    
    /* Get langth of JSON string*/
    var JSONStringLen = stripedText.length;

    var rootCodeBlock = new codeBlock();
    //Set rootCOdeBlock isRoot to true
    rootCodeBlock.isRoot = true;
    
    
    try {
        var jsonParse = JSON.parse(jsonText,valueType);
        var buildJsonObject = buildIterator(jsonParse,rootCodeBlock);
        console.log(buildJsonObject)

        //Start JSON
        var format = '{\n';

        format += deepLook(buildJsonObject);

        format += '\n}';

        return format;
        
    } catch (error) {
        //Error message if JSON is invalid
        vscode.window.showErrorMessage('An Error Has Occured: '+error.message);
        console.log(error);
        return false;
    }

}

//JSON Parser function
function buildIterator(obj,useCodeBlock) {//Parent codeBlock object
    // Set codeBlockElement to null
    var currentCodeBlockElement;
    
    //I don't know;
    for (var property in obj) {
        if (obj.hasOwnProperty(property)) {

            if(Object.prototype.toString.call(obj[property]) === '[object Array]'){
                currentCodeBlockElement = new codeBlockElements();// Create new codeBlockElement
                currentCodeBlockElement.key = property
                currentCodeBlockElement.value = null;
                currentCodeBlockElement.keyLength = property.length;
                currentCodeBlockElement.blockType = 'array';
                currentCodeBlockElement['is' + (property.charAt(0).toUpperCase() + property.slice(1))] = true;// Dynamic isKeyname property
                currentCodeBlockElement.parentCodeBlock = useCodeBlock;
                currentCodeBlockElement.level = useCodeBlock.level;// Block level
                
                var newCodeBlockElement = new codeBlock();//New codeBlock object
                newCodeBlockElement.parentCodeBlock = currentCodeBlockElement;// Set propery to referance parent codeBlock
                newCodeBlockElement.level = useCodeBlock.level + 1;//Set clodeBlockElement level plus 1

                currentCodeBlockElement.codeBlockValue = newCodeBlockElement;// Add new codeBlockElement

                useCodeBlock.childCodeBlockElements.push(currentCodeBlockElement);// Add codeBlockElement to parent codeBlock object
                
                buildIterator(obj[property],newCodeBlockElement);// If childeren blocks

            }else if(Object.prototype.toString.call(obj[property]) === '[object Object]'){
                
                currentCodeBlockElement = new codeBlockElements();// Create new codeBlockElement
                currentCodeBlockElement.key = property
                currentCodeBlockElement.value = null;
                currentCodeBlockElement.keyLength = property.length;
                currentCodeBlockElement.blockType = 'object';
                currentCodeBlockElement['is' + (property.charAt(0).toUpperCase() + property.slice(1))] = true;// Dynamic isKeyname property
                currentCodeBlockElement.parentCodeBlock = useCodeBlock;
                currentCodeBlockElement.level = useCodeBlock.level;// Block level
                
                var newCodeBlockElement = new codeBlock();//New codeBlock object
                newCodeBlockElement.parentCodeBlock = currentCodeBlockElement;// Set propery to referance parent codeBlock
                newCodeBlockElement.level = useCodeBlock.level + 1;//Set clodeBlockElement level plus 1

                currentCodeBlockElement.codeBlockValue = newCodeBlockElement;// Add new codeBlockElement

                useCodeBlock.childCodeBlockElements.push(currentCodeBlockElement);// Add codeBlockElement to parent codeBlock object
                
                buildIterator(obj[property],newCodeBlockElement);// If childeren blocks
            }else{
                currentCodeBlockElement = new codeBlockElements();
                currentCodeBlockElement.key = property
                currentCodeBlockElement.value = obj[property];
                currentCodeBlockElement.keyLength = property.length;
                currentCodeBlockElement.blockType = 'pair';
                currentCodeBlockElement['is' + (property.charAt(0).toUpperCase() + property.slice(1))] = true;// Dynamic isKeyname property
                currentCodeBlockElement.parentCodeBlock = useCodeBlock;
                currentCodeBlockElement.level = useCodeBlock.level;//Set clodeBlockElement level

                useCodeBlock.childCodeBlockElements.push(currentCodeBlockElement);// Add to parent block || Add to current block
                
            }
        }
        
    }

    return useCodeBlock;

}

//Look into the children array
function deepLook(jsonCodeBlock) {   
    var generateJSONString = '';
    var spaceIndent = '\t';
    var setColonPostion = 0;

    for (var i = 0, length = jsonCodeBlock.childCodeBlockElements.length; i < length; i++) {

        var currentElement = jsonCodeBlock.childCodeBlockElements[i]; // Current Object
        var currentLevel = currentElement.parentCodeBlock.level; // Current level
        var currentColonPosition = (currentElement.keyLength);// Length of keyname

        /*Block level spacing*/
        var addSpace = '';
        var indSpc = 0;
        while (indSpc < currentLevel) {
            addSpace += '\t';
            indSpc++;
        }

        // Get current level largest keyname length
        /**
         * Loop through currentElement > ParentCodeBlock -> childCodeBlockElements keyLengths
         * and push them to array
         */
        var val = currentElement.parentCodeBlock.childCodeBlockElements;
        var highestLevel = [];
        for (var loop = 0; loop < val.length; loop++) {
            highestLevel.push(val[loop].keyLength)
        }
        
        var largestKeyname = Math.max(...highestLevel);// Find the largest value/Level

        //length of padding (current+Elements keyname length minus largest value in codeBlock)
        var lengthOfPadding = Math.abs(currentColonPosition - largestKeyname); 

        var paddingString = '';
        for (var index = 0; index < lengthOfPadding; index++) {// Loop over padding length add space for each count
            paddingString += ' '; 
        }

        /**
         * Keyname building
         */
        if(currentElement.key){// Check if key is set
            if(currentElement.key.search(/^[0-9]*$/) == -1){// BAD: Does key only have numbers?
            generateJSONString += spaceIndent + addSpace + paddingString + '"' + currentElement.key + '": ';
            }else {
                if(currentElement.blockType == 'array'){
                    generateJSONString += spaceIndent + addSpace;
                }
                if(currentElement.blockType == 'object'){
                    generateJSONString += spaceIndent + addSpace;
                }
            }
        }

        /**
         * Value building
         */
        if(currentElement.value !== null){// Check if value set
            generateJSONString += currentElement.value;

            /** Start Old formatting code */
            if((i+1) < length){
                if(currentElement.key.search(/^[0-9]*$/) !== -1){// Does key only have numbers?
                    generateJSONString += ', ';
                }else {
                    generateJSONString += ',\n';
                }
            } else {
                if(currentElement.key.search(/^[0-9]*$/) !== -1){// Does key only have numbers?
                    generateJSONString += ' ';
                }else {
                    generateJSONString += '\n';
                }
            }
            /** End Old formatting code */
        }
        

        /**
         * Children Blocks
         */
        if(currentElement.codeBlockValue !== null && currentElement.codeBlockValue.childCodeBlockElements.length > 0){
            
            if(currentElement.blockType == 'array'){// Is array block?
                //generateJSONString += '[\n';

                /** Start Old formatting code */
                if(currentElement.key.search(/^[0-9]*$/) !== -1){// Looking for array with keyname
                    generateJSONString += '[ ';
                }else {// Check if currentElement is certain key - Need to fix!
                    if(currentElement.isAllOf || currentElement.isChoices
                    || currentElement.isForeignKeys || currentElement.isSerialize
                    || currentElement.isComputeds || currentElement.isContextValues 
                    || currentElement.isIndexes || currentElement.isOneOf
                    || currentElement['isX-choices']){
                        generateJSONString += '[\n';
                    }else{
                        generateJSONString += '[ ';
                    }
                }
                /** End Old formatting code */

                generateJSONString += deepLook(currentElement.codeBlockValue);
                
                if((i+1) < length){// If not last value
                    /** Start Old formatting code */
                    if(currentElement.isAllOf || currentElement.isChoices // Need to fix!
                        || currentElement.isForeignKeys || currentElement.isSerialize
                        || currentElement.isComputeds || currentElement.isContextValues 
                        || currentElement.isIndexes || currentElement.isOneOf
                        || currentElement['isX-choices']){
                            generateJSONString += spaceIndent + addSpace;
                    }
                    /** End Old formatting code */

                    generateJSONString += '],\n';

                } else {
                    /** Start Old formatting code */
                    if(currentElement.isAllOf || currentElement.isChoices // Need to fix!
                        || currentElement.isForeignKeys || currentElement.isSerialize
                        || currentElement.isComputeds || currentElement.isContextValues 
                        || currentElement.isIndexes || currentElement.isOneOf
                        || currentElement['isX-choices']){
                            generateJSONString += spaceIndent + addSpace;
                    }
                    /** End Old formatting code */
                    generateJSONString += ']\n';
                }
            }

            if(currentElement.blockType == 'object'){
                generateJSONString += '{\n';
                
                generateJSONString += deepLook(currentElement.codeBlockValue);

                var endSpacing = spaceIndent + addSpace;
                if((i+1) < length){
                    generateJSONString += endSpacing + '},\n'; // Add indention for closing brackets
                } else {
                    generateJSONString += endSpacing + '}\n';
                }
            }
            
        }
        
    }

    return generateJSONString;
}


function valueType(key, value){
    switch (typeof value) {
        case 'string':
            return '"' + String(value) + '"';
            break;
        case 'number':
            return Number(value);
            break;
        default:
            return value;
            break;
    }
}


/**
 * Function return when module in is include in extension
 */
module.exports = function (text) {
    return str(text);
};
